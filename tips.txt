Functionality:
at least memes generator

design inspired from:
https://www.kapwing.com/studio/editor

https://www.youtube.com/watch?v=Aew5auHUzLY
Don't rely too much on the developer tools. The canvas was resizing accordingly but didn't happen only on tools
flex: 1 or maybe an item wont occupy space on the page.

Use the "value" tag of a radio button name-list, don't forget to add the element before the add event listener command
and "change" event lsitener

https://css-tricks.com/html-inputs-and-labels-a-love-story/
it is always the best idea to use an explicit label instead of an implicit label. Which is using for and input outside of label.
when we‚Äôre working with a group of inputs, say several radio buttons or checkboxes. In these cases, a <legend> element is used to group certain input elements, such as radio buttons, and serves as the accessible label for the entire group.
Only input type="submit" or type="button" does not need a label, the remaining inputs are happier with the mentioned.
the visual order of a page should follow the order in which elements appear in the DOM. That‚Äôs because: Impaired men.
It is conventional to place the label on the right-hand side of the input for checkboxes and radio buttons. This can be done by placing the label after the input in the HTML, ensuring the DOM and visual order match.
https://kittygiraudel.com/snippets/sr-only-class/
The .sr-only class is a utility class aiming at visually hiding the element while keeping it accessible to assistive technologies such as screen-readers.
Visible: no (removed from layout)
Accessible: yes
Element + children focusable: yes (‚ö†Ô∏è)
Verdict: üëç Great to visually hide text content while preserving it for assistive technologies.
Don‚Äôt: Substitute a label with another attribute or element

It's a simple HTML code. Inside the body tag, we will use the div tag and put everything that we need inside it. 
It is good practice to keep your code organized like this, and it will also make the button and image element block because div is a block element,
 so anything inside it will also become a block.

 make a fake canvas so the previous image is saved. You draw the real canvas into the fake canvas ctx and then
 drive the fake canvas into real canvas ctx. 

 use the 'checked' property of checkboxes to know if a checkbox is checked

 // meu pensamento da l√≥gica. Desenha 1 retangulo 0,0 e via desenhando conforme via mexendo o mouse, porem 
tambem via apagando, exceto que quando solta n√£o apaga. 
//Tudo certo, a √∫nica coisa que esqueci foi a flag. O listener de mouse move fica presente o tempo todo, apenas retorna mais cedo baseado na flag.
Esse listener escuta no max 60 movimentos por segundo, sendo que para junto do mouse (apenas dentro do canvas). N √© t√£o pesado. 

https://stackoverflow.com/questions/61700457/layering-the-canvas-without-multiple-canvases

As I went following the tutorial, I saw many formats. A good example is image data.data to canvas width. A conversion
got made with a weird formula. It didn't stood as the only one, since the hex color used regex to become RGB. 

moveTo() creates a new subpath inside the beginPath(). closePath() works for subpaths too.

four initial values = just the curve thus the first point stays on moveTo
        ctx.bezierCurveTo(100,100,100,100,shapeEnd['x'],shapeEnd['y'])

        use objects to acess values via dynamic strings. Strings are primitive values, arent good for variables. objects 
        are the way to use them. 

        a click handler wont give you perf issues, it's that actions taken on click that 'can' cause issues.
        I think I'll change arc to add two more event listeners, that are gonna be removed by removeEventListener
        and by using condition to not bug
        I'll not indeed, its not worth the time. But let's learn with that!
        Pseudo code: On arc click, draw to an end. The end will take start and end point values as p1 and p2, also as endpoint.
        but in the end the canvas will have a function listening for one click. This click will set p1 coordinates, restore the before all
        saved canvas, and draw It, appending again another function, meanwhile removing itself. canvas.removeEventListener(function). This other will redo the previous,
        but change with a new p2 coordinate. And then, remove itself from canvas again. PS: The variables emerge as saved outside the event scopes.  
        

        on mouse up -> canvas-add two event listeners:'click', if (isDrawing==='curved-line') {
                curvePointsValueP1['x']= e.offsetX;
                curvePointsValueP1['y']= e.offsetY;
                remove itself - the function must have a name
                canvas.addEventListener('click', if (isDrawing==='curved-line){
                curvePointsValueP2['x']= e.offsetX;
                curvePointsValueP2['y']= e.offsetY;
                remove itself - the function must have a name
                })
        }
        function addCurveControl(){

        canvas.addEventListener('click', changeP1Coords)

        function changeP1Coords (e) {
                curvePointsValueP1['x']= e.offsetX;
                curvePointsValueP1['y']= e.offsetY;
                curvePointsValueP1['open']=true;
                canvas.removeEventListener('click', changeP1Coords)
                canvas.addEventListener('click', changeP2Coords)

                drawing(e)
        }
        function changeP2Coords (e) {
                curvePointsValueP2['x']= e.offsetX;
                curvePointsValueP2['y']= e.offsetY;
                curvePointsValueP2['open']=true;
                canvas.removeEventListener('click', changeP2Coords)

                drawing(e)
                curvePointsValueP1['open']=false;
                curvePointsValueP2['open']=false;
        }
        }

        Foi √≥timo, 40 minutinhos e a user experience mudou totalmente. Acredito que teria sido mais f√°cil,
        se mantenho a mentalidade de add e remove event listener. 

        Later group properties together in objects, It'll make the code a lot cleaner. Won't it duplicate code though?
        "There is no such thing as duplicate names in Javascript. You will never get an error when re-declaring a name that already exists."
        Executions are "code", duplicating names/variables is another, especially if the object/context is different. Co-work can't always have the same variable.
        Also, you can use a linter later. 

        Use emmet! like element[attribute=""]

O CSS tem um pseudo seletor pro pr√≥ximo elemento. √â "+", com ele, d√° pra usar o Checked e combar colocando um input
e a label logo em seguida. O estilo s√≥ vai aplicar se estiver checked, oq ue √© a inten√ß√£o.

This works with any explorer.

document.querySelector('input[name="genderS"]:checked').value;

// I will be typing in a text area, this will have the listener to onkeydown or on change, which will act in the canvas
// os valores dos elementos mudam em tempo real, t√° safe. 

A propriedade checked √© real nos radio buttons, certifique-se de estar clicando no elemento correto.
https://linuxhint.com/check-radio-button-selected-javascript/

certify to use a fill style when filling text.

the first gradient property is the direction of the gradient. It was used on the ruler, and grouped to background-size and repeat

ctx.lineWidth n√£o aceita 0, tem que ser no m√≠nimo 1. 